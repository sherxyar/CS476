generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  auditLogs      AuditLog[]
  notes          PMNote[]
  hashedPassword String
  // one user can have many projects
  projects       Project[]  @relation("ManagerProjects")

  // to match or relate to financial history table
  financialChanges FinancialHistoryEntry[] @relation("UserFinancialChanges")
}

model Project {
  id               String                  @id @default(uuid())
  projectID        String                  @unique
  title            String
  phase            String                  @default("Planning")
  description      String
  forecast         Float
  actuals          Float
  budget           Float
  plannedStartDate DateTime
  plannedEndDate   DateTime
  dateCreated      DateTime                @default(now())
  lastUpdated      DateTime?
  status           String?
  pmNotesHistory   PMNote[]
  financialHistory FinancialHistoryEntry[] //

  projectManagerId Int?
  projectManager   User? @relation("ManagerProjects", fields: [projectManagerId], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  tableName  String
  recordId   Int
  beforeData Json?
  afterData  Json?
  timestamp  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

// storing PM Notes
model PMNote {
  id        Int      @id @default(autoincrement())
  note      String
  createdAt DateTime @default(now())

  // relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId Int?
  author User? @relation(fields: [userId], references: [id])
}

// This is the log/table that stores financial history
model FinancialHistoryEntry {
  id        Int     @id @default(autoincrement())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  field     String // "forecast" | "budget" | "actuals"
  oldValue  Float
  newValue  Float
  reason    String?
  changedAt DateTime @default(now())

  userId    Int?
  changedBy User? @relation("UserFinancialChanges", fields: [userId], references: [id])
}
