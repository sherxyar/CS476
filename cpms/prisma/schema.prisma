datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  auditLogs AuditLog[]
  notes     PMNote[]
  hashedPassword String
  // one user can have many projects
  projects Project[] @relation("ManagerProjects")

  // to match or relate to financial history table
  financialChanges FinancialHistoryEntry[] @relation("UserFinancialChanges")
  
  // Add the missing relation fields for TabAccessRequest
  tabAccessRequests TabAccessRequest[] // For the user field in TabAccessRequest
  approvedRequests  TabAccessRequest[] @relation("Approver") // For the approver field in TabAccessRequest
}

model Project {
  id               String                  @id @default(uuid())
  projectID        String                  @unique
  title            String
  phase            String                  @default("Planning")
  description      String
  forecast         Float
  actuals          Float
  budget           Float
  plannedStartDate DateTime
  plannedEndDate   DateTime
  dateCreated      DateTime                @default(now())
  lastUpdated      DateTime?
  status           String?
  pmNotesHistory   PMNote[]
  financialHistory FinancialHistoryEntry[]

  invoices         Invoice[]
  projectManagerId Int?
  projectManager   User? @relation("ManagerProjects", fields: [projectManagerId], references: [id])

  schedule ProjectSchedule? @relation("ProjectScheduleRelation")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  tableName  String
  recordId   Int
  beforeData Json?
  afterData  Json?
  timestamp  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

// storing PM Notes
model PMNote {
  id        Int      @id @default(autoincrement())
  note      String
  createdAt DateTime @default(now())

  // relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId Int?
  author User? @relation(fields: [userId], references: [id])
}

// This is the log/table that stores financial history
model FinancialHistoryEntry {
  id        Int     @id @default(autoincrement())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  field     String // "forecast" | "budget" | "actuals"
  oldValue  Float
  newValue  Float
  reason    String?
  changedAt DateTime @default(now())

  userId    Int?
  changedBy User? @relation("UserFinancialChanges", fields: [userId], references: [id])
}

// invoice table
model Invoice {
  id            Int           @id @default(autoincrement())
  projectId     String                   
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  invoiceNumber String
  dateIssued    DateTime
  amount        Decimal        @db.Decimal(12, 2)
  status        InvoiceStatus  @default(NOT_PAID)
  vendor        String

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

}

enum InvoiceStatus {
  PAID
  NOT_PAID
}

model TabAccessRequest {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])

  tabName    String   // ì˜ˆ: "Financials", "Admin"
  status     AccessStatus @default(PENDING)

  requestedAt DateTime @default(now())
  approvedBy  Int?
  approver    User?    @relation("Approver", fields: [approvedBy], references: [id])
}

enum AccessStatus {
  PENDING
  APPROVED
  REJECTED
}

//The below 2 tables are for Schedule tab
model Milestone {
  id          Int             @id @default(autoincrement())
  title       String          // Changed from task to title for consistency
  description String
  startDate   DateTime
  endDate     DateTime
  status      String
  scheduleId  Int
  schedule    ProjectSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model ProjectSchedule {
  id         Int         @id @default(autoincrement())
  projectId  String      @unique
  project    Project     @relation("ProjectScheduleRelation", fields: [projectId], references: [id], onDelete: Cascade)
  milestones Milestone[]
}