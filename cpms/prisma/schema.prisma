generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

/// *
///  * User Table
model User {
  id                     Int                     @id @default(autoincrement())
  name                   String
  email                  String                  @unique
  hashedPassword         String
  accountRole            AccountRole
  department             String?
  lastActivity           DateTime?
  approvedChanges        ChangeLog[]             @relation("ApprovedChanges")
  requestedChanges       ChangeLog[]             @relation("RequestedChanges")
  financialChanges       FinancialHistoryEntry[] @relation("UserFinancialChanges")
  mfaCodes               Mfacode[]
  triggeredNotifications Notification[]          @relation("TriggeredNotifications")
  notifications          Notification[]          @relation("UserNotifications")
  notes                  PMNote[]
  managedProjects        Project[]               @relation("ProjectManager")
  addedMembers           ProjectMember[]         @relation("AddedMembers")
  memberships            ProjectMember[]         @relation("UserMembership")
  approvedTabs           TabAccessRequest[]      @relation("ApproveUser")
  tabRequests            TabAccessRequest[]      @relation("RequestUser")
  auditLogs              AuditLog[]
}

model Project {
  id               String                  @id @default(uuid())
  projectID        String                  @unique
  title            String
  phase            String                  @default("Planning")
  description      String
  forecast         Float
  actuals          Float
  budget           Float
  plannedStartDate DateTime
  plannedEndDate   DateTime
  dateCreated      DateTime                @default(now())
  lastUpdated      DateTime?
  status           String?
  projectManagerId Int?
  changeLogs       ChangeLog[]
  financialHistory FinancialHistoryEntry[]
  Invoice          Invoice[]
  lessonsLearned   LessonsLearned[]        @relation("ProjectLessons")
  notifications    Notification[]          @relation("ProjectNotifications")
  pmNotesHistory   PMNote[]
  projectManager   User?                   @relation("ProjectManager", fields: [projectManagerId], references: [id])
  members          ProjectMember[]
  schedule         ProjectSchedule?        @relation("ProjectScheduleRelation")
  risks            RiskRegister[]          @relation("ProjectRisks")
}

/// *
///  * Not sure what this is? - Need to check with Dongho Kim
model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  tableName  String
  recordId   Int
  beforeData Json?
  afterData  Json?
  timestamp  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

/// *
///  * Notification System - Observer Pattern Implementation
model Notification {
  id              String           @id @default(uuid())
  userId          Int
  projectId       String
  title           String
  message         String
  type            NotificationType @default(PROJECT_UPDATE)
  isRead          Boolean          @default(false)
  createdAt       DateTime         @default(now())
  triggeredBy     Int?
  project         Project          @relation("ProjectNotifications", fields: [projectId], references: [id], onDelete: Cascade)
  triggeredByUser User?            @relation("TriggeredNotifications", fields: [triggeredBy], references: [id])
  user            User             @relation("UserNotifications", fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([projectId])
}

/// *
///  * General Tab: PM Notes
model PMNote {
  id        Int      @id @default(autoincrement())
  note      String
  createdAt DateTime @default(now())
  projectId String
  userId    Int?
  project   Project  @relation(fields: [projectId], references: [id])
  author    User?    @relation(fields: [userId], references: [id])
}

/// *
///  * FinancialsTab: Change History
model FinancialHistoryEntry {
  id        Int      @id @default(autoincrement())
  projectId String
  field     String
  oldValue  Float
  newValue  Float
  reason    String?
  changedAt DateTime @default(now())
  userId    Int?
  project   Project  @relation(fields: [projectId], references: [id])
  changedBy User?    @relation("UserFinancialChanges", fields: [userId], references: [id])
}

/// *
///  * FinancialsTab: Invoices
model Invoice {
  id            Int           @id @default(autoincrement())
  projectId     String
  invoiceNumber String
  dateIssued    DateTime
  amount        Decimal       @db.Decimal(12, 2)
  status        InvoiceStatus @default(NOT_PAID)
  vendor        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

/// *
///  * Not sure what this is? - Need to check with Dongho Kim
model TabAccessRequest {
  id          Int       @id @default(autoincrement())
  userId      Int
  approvedBy  Int?
  status      String    @default("Pending")
  requestedAt DateTime  @default(now())
  approvedAt  DateTime?
  approver    User?     @relation("ApproveUser", fields: [approvedBy], references: [id])
  user        User      @relation("RequestUser", fields: [userId], references: [id])
}

/// *
///  * Schedule tab
model Milestone {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  status      String
  scheduleId  Int
  schedule    ProjectSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model ProjectSchedule {
  id         Int         @id @default(autoincrement())
  projectId  String      @unique
  milestones Milestone[]
  project    Project     @relation("ProjectScheduleRelation", fields: [projectId], references: [id], onDelete: Cascade)
}

/// *
///  * Delivery tab: Risk Register
model RiskRegister {
  id                       Int       @id @default(autoincrement())
  riskID                   String?   @map("Risk ID")
  riskName                 String?   @map("Risk Name")
  riskDescription          String?   @map("Risk Description")
  dateCaptured             DateTime? @map("Date Captured")
  riskOwner                String?   @map("Risk Owner")
  currentImpact            Int?      @map("Current Impact")
  currentLikelihood        Int?      @map("Current Likelihood")
  currentScore             Int?      @map("Current Score")
  riskResponse             String?   @map("Risk Response")
  operationalOrProjectRisk String?   @map("Operational or Project Risk")
  /// *
  ///    * relation back to project
  projectId                String
  project                  Project   @relation("ProjectRisks", fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

/// *
///  * Delivery tab: Lessons Learned
model LessonsLearned {
  id               Int     @id @default(autoincrement())
  topic            String?
  experience       String?
  impactRecurrence String? @map("Impact & Recurrence")
  lessonsLearned   String? @map("Lessons Learned")
  bestPractice     String? @map("Best Practice")
  assignedTo       String? @map("Assigned To")
  /// *
  ///    * relation back to project
  projectId        String
  project          Project @relation("ProjectLessons", fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  projectId String
  userId    Int
  role      AccountRole
  createdAt DateTime    @default(now())
  addedById Int?
  addedBy   User?       @relation("AddedMembers", fields: [addedById], references: [id])
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation("UserMembership", fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model Mfacode {
  id         Int      @id @default(autoincrement())
  userId     Int
  code       String
  validUntil DateTime
  user       User     @relation(fields: [userId], references: [id])
}

/// ─── Change-Log model 
model ChangeLog {
  id              String         @id @default(uuid())
  date            DateTime       @default(now())
  changeType      ChangeType
  category        ChangeCategory
  description     String
  impactArea      String
  oldValue        String?
  newValue        String?
  justification   String
  /// who asked for it
  requestedById   Int
  /// who approved / rejected it
  approvedById    Int?
  status          ChangeStatus   @default(Pending)
  priority        ChangePriority @default(Medium)
  estimatedImpact String?
  /// link back to project
  projectId       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  approvedBy      User?          @relation("ApprovedChanges", fields: [approvedById], references: [id])
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  requestedBy     User           @relation("RequestedChanges", fields: [requestedById], references: [id])

  @@index([projectId])
  @@index([requestedById])
}

enum InvoiceStatus {
  PAID
  NOT_PAID
}

enum AccountRole {
  ADMIN
  PROJECT_MANAGER
  COLLABORATOR

  @@map("account_role")
}

enum ChangeCategory {
  Budget
  Forecast
  Actuals
  Timeline
  Milestone
  Deliverable
  Other
}

enum ChangeStatus {
  Pending
  Approved
  Rejected
  Implemented
}

enum ChangePriority {
  Low
  Medium
  High
  Critical
}

enum ChangeType {
  Financial
  Schedule
  Scope
  Resource
  Risk
}

enum NotificationType {
  PROJECT_UPDATE
  FINANCIAL_CHANGE
  SCHEDULE_CHANGE
  MILESTONE_UPDATE
  MEMBER_ADDED
  MEMBER_REMOVED
  CHANGE_LOG_CREATED
  GENERAL_UPDATE
}
