generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id               Int                     @id @default(autoincrement())
  name             String
  email            String                  @unique
  hashedPassword   String
  financialChanges FinancialHistoryEntry[] @relation("UserFinancialChanges")
  notes            PMNote[]
  projects         Project[]               @relation("ManagerProjects")
  auditLogs        AuditLog[]
  tabRequests      TabAccessRequest[]      @relation("RequestUser")
  approvedTabs     TabAccessRequest[]      @relation("ApproveUser")
}

model Project {
  id               String                  @id @default(uuid())
  projectID        String                  @unique
  title            String
  phase            String                  @default("Planning")
  description      String
  forecast         Float
  actuals          Float
  budget           Float
  plannedStartDate DateTime
  plannedEndDate   DateTime
  dateCreated      DateTime                @default(now())
  lastUpdated      DateTime?
  status           String?
 
  projectManagerId Int?

  schedule ProjectSchedule? @relation("ProjectScheduleRelation")

  financialHistory FinancialHistoryEntry[]
  Invoice          Invoice[]
  pmNotesHistory   PMNote[]
  projectManager   User?                   @relation("ManagerProjects", fields: [projectManagerId], references: [id])

}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  tableName  String
  recordId   Int
  beforeData Json?
  afterData  Json?
  timestamp  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model PMNote {
  id        Int      @id @default(autoincrement())
  note      String
  createdAt DateTime @default(now())
  projectId String
  userId    Int?
  project   Project  @relation(fields: [projectId], references: [id])
  author    User?    @relation(fields: [userId], references: [id])
}

model FinancialHistoryEntry {
  id        Int      @id @default(autoincrement())
  projectId String
  field     String
  oldValue  Float
  newValue  Float
  reason    String?
  changedAt DateTime @default(now())
  userId    Int?
  project   Project  @relation(fields: [projectId], references: [id])
  changedBy User?    @relation("UserFinancialChanges", fields: [userId], references: [id])
}

model Invoice {
  id            Int           @id @default(autoincrement())
  projectId     String
  invoiceNumber String
  dateIssued    DateTime
  amount        Decimal       @db.Decimal(12, 2)
  status        InvoiceStatus @default(NOT_PAID)
  vendor        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  PAID
  NOT_PAID
}

model TabAccessRequest {
  id          Int       @id @default(autoincrement())
  userId      Int
  approvedBy  Int?
  status      String    @default("Pending") // Pending, Approved, Rejected
  requestedAt DateTime  @default(now())
  approvedAt  DateTime?

  user     User  @relation("RequestUser", fields: [userId], references: [id])
  approver User? @relation("ApproveUser", fields: [approvedBy], references: [id])
}

//The below 2 tables are for Schedule tab
model Milestone {
  id          Int             @id @default(autoincrement())
  title       String          // Changed from task to title for consistency
  description String
  startDate   DateTime
  endDate     DateTime
  status      String
  scheduleId  Int
  schedule    ProjectSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model ProjectSchedule {
  id         Int         @id @default(autoincrement())
  projectId  String      @unique
  project    Project     @relation("ProjectScheduleRelation", fields: [projectId], references: [id], onDelete: Cascade)
  milestones Milestone[]
}

-- the next 2 tables are for delivery tab

-- Table for Lessons Learned
CREATE TABLE lessons_learned (
    id SERIAL PRIMARY KEY,
    project_id VARCHAR(255) NOT NULL,
    topic TEXT NOT NULL,
    experience TEXT NOT NULL,
    impact_recurrence TEXT NOT NULL,
    lesson_learned TEXT NOT NULL,
    best_practice TEXT NOT NULL,
    assigned_to VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);

-- Table for Risk Register
CREATE TABLE risk_register (
    id SERIAL PRIMARY KEY,
    project_id VARCHAR(255) NOT NULL,
    risk_id VARCHAR(255) UNIQUE NOT NULL, -- Assuming risk_id should be unique
    risk_description TEXT NOT NULL,
    category VARCHAR(255) NOT NULL,
    impact VARCHAR(255) NOT NULL,
    likelihood VARCHAR(255) NOT NULL,
    risk_score INTEGER NOT NULL, -- Assuming score is an integer
    mitigation_plan TEXT NOT NULL,
    contingency_plan TEXT, -- Optional
    owner VARCHAR(255) NOT NULL,
    status VARCHAR(50) NOT NULL CHECK (status IN ('Open', 'Closed', 'Mitigated')),
    date_identified DATE NOT NULL,
    date_closed DATE, -- Nullable
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE
);


